// Fullstack Job Board Platform - Backend (Node.js + Express + MongoDB + Prisma)

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Server } = require('socket.io');
const http = require('http');
const multer = require('multer');
const authRoutes = require('./routes/auth');
const jobRoutes = require('./routes/jobs');
const applicationRoutes = require('./routes/applications');
const { rateLimiter } = require('./middlewares/rateLimiter');
const { verifyToken, checkRole } = require('./middlewares/authMiddleware');
const { PrismaClient } = require('@prisma/client');

dotenv.config();
const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
  },
});
const prisma = new PrismaClient();

app.use(cors());
app.use(express.json());
app.use(rateLimiter);

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB Connected'))
  .catch(err => console.log(err));

app.use('/api/auth', authRoutes);
app.use('/api/jobs', verifyToken, jobRoutes);
app.use('/api/applications', verifyToken, applicationRoutes);

// File Upload (Resumes)
const storage = multer.diskStorage({
  destination: './uploads/',
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});
const upload = multer({ storage });
app.post('/api/upload', verifyToken, upload.single('resume'), (req, res) => {
  res.json({ filePath: req.file.path });
});

// WebSocket for real-time job updates
io.on('connection', (socket) => {
  console.log('New client connected');
  socket.on('newJob', (job) => {
    io.emit('jobPosted', job);
  });
  socket.on('disconnect', () => {
    console.log('Client disconnected');
  });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// Fullstack Job Board Platform - Frontend (Next.js + Tailwind CSS)
// Next.js frontend setup with pages: Home, Job Details, Company Dashboard
// Uses Zustand for state management & React Hook Form for validation

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import { create } from 'zustand';
import '../styles/globals.css';

const useStore = create((set) => ({
  jobs: [],
  fetchJobs: async () => {
    const response = await axios.get('/api/jobs');
    set({ jobs: response.data });
  }
}));

export default function Home() {
  const { jobs, fetchJobs } = useStore();
  useEffect(() => { fetchJobs(); }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold">Job Listings</h1>
      {jobs.map((job) => (
        <Link key={job.id} href={`/job/${job.id}`}>
          <div className="p-4 shadow-md my-2 cursor-pointer">
            <h2 className="text-xl font-semibold">{job.title}</h2>
            <p>{job.company}</p>
          </div>
        </Link>
      ))}
    </div>
  );
}

// Job Details Page
export function JobDetails({ job }) {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold">{job.title}</h1>
      <p>{job.description}</p>
      <button className="mt-4 px-4 py-2 bg-blue-500 text-white rounded">Apply Now</button>
    </div>
  );
}

// Company Dashboard with Role-Based Access Control
export function CompanyDashboard({ user }) {
  const { register, handleSubmit } = useForm();
  const router = useRouter();

  if (user.role !== 'company') {
    return <p>Access Denied</p>;
  }

  const onSubmit = async (data) => {
    await axios.post('/api/jobs', data, {
      headers: { Authorization: `Bearer ${user.token}` },
    });
    router.reload();
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold">Post a Job</h1>
      <form onSubmit={handleSubmit(onSubmit)}>
        <input {...register('title')} placeholder="Job Title" className="border p-2 w-full" />
        <input {...register('description')} placeholder="Description" className="border p-2 w-full mt-2" />
        <button type="submit" className="mt-4 px-4 py-2 bg-green-500 text-white rounded">Post</button>
      </form>
    </div>
  );
}
